{"pageProps":{"slug":"my-mac-dev-environment-setup","content":"<a href=\"#foreword\"><h2 id=\"foreword\">Foreword</h2></a><p>Given that I&#39;ve never developed on macOS before, I thought it would be a good\nidea to document my full stack web development environment setup to help future\nMe and anyone else out there.</p>\n<blockquote>\n<p><strong>NOTE:</strong> This is a <em>highly</em> opinionated guide on setting up mac&#39;s for full\nstack web development. This setup won&#39;t work for <em>everyone</em>.</p>\n</blockquote>\n<a href=\"#contents\"><h2 id=\"contents\">Contents</h2></a><ul>\n<li><a href=\"#general-settings\">General Settings</a></li>\n<li><a href=\"#terminal\">Terminal</a><ul>\n<li><a href=\"#alacritty\">Alacritty</a></li>\n<li><a href=\"#homebrew\">Homebrew</a></li>\n<li><a href=\"#git\">Git</a></li>\n<li><a href=\"#zsh\">zsh</a></li>\n<li><a href=\"#tmux\">tmux</a></li>\n</ul>\n</li>\n<li><a href=\"#ide---neovim\">IDE - Neovim</a></li>\n<li><a href=\"#clis\">CLIs</a></li>\n<li><a href=\"#desktop-apps\">Desktop Apps</a><ul>\n<li><a href=\"#alfred\">Alfred</a></li>\n<li><a href=\"#spectacle\">Spectacle</a></li>\n<li><a href=\"#iglance\">iGlance</a></li>\n<li><a href=\"#brave\">Brave</a></li>\n</ul>\n</li>\n<li><a href=\"#useful-links\">Useful Links</a></li>\n</ul>\n<a href=\"#general-settings\"><h2 id=\"general-settings\">General Settings</h2></a><p>Before getting into any development-specific setup, let&#39;s first customise some\nsystem and Finder settings:</p>\n<ul>\n<li>Acquire some additional screen real estate by hiding the app dock:<ul>\n<li>Go to <code>System Settings -&gt; Dock &amp; Menu Bar</code> and do the following:<ul>\n<li>Set <code>Position on Screen</code> to <code>Right</code></li>\n<li>Move the dock size slider to the smaller side</li>\n<li>Untick <code>Show recent applications in Dock</code></li>\n<li>Tick <code>Automatically hide and show the Dock</code></li>\n</ul>\n</li>\n<li>Now the dock will only appear when the cursor hovers over the right hand\nside of the screen.</li>\n</ul>\n</li>\n<li>Disable <code>Spotlight</code> to be the default <code>⌘ + space</code> shortcut. We will later be\ncalling Alfred with this shortcut:<ul>\n<li>Go to <code>System Settings -&gt; Keyboard shortcuts</code></li>\n<li>Untick <code>Show Spotlight search</code> for <code>⌘ + space</code></li>\n</ul>\n</li>\n<li>Disable Ask Siri</li>\n<li>Disable track pad natural scroll direction<ul>\n<li>Go to <code>System Settings -&gt; Trackpad -&gt; Scroll &amp; Zoom</code></li>\n<li>Untick <code>Scroll direction: Natural</code></li>\n</ul>\n</li>\n<li>Keyboard: I use a UK Layout mechanical keyboard, so will need to make the\nfollowing changes:<ul>\n<li><code>System Settings -&gt; Keyboard -&gt; Input Sources</code> select British PC</li>\n<li><code>System Settings -&gt; Keyboard -&gt; Select My Keyboard -&gt; Modifier Keys</code>:<ul>\n<li>Change the Option Key to <code>⌘ Command</code></li>\n<li>Change the Command Key to <code>⌥ Option</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Finder<ul>\n<li><code>Finder -&gt; Preferences -&gt; Show all file name extensions</code></li>\n<li><code>⌘ + shift + .</code> to show dotfiles</li>\n<li>Remove unrequired favourites in sidebar.</li>\n</ul>\n</li>\n</ul>\n<a href=\"#terminal\"><h2 id=\"terminal\">Terminal</h2></a><p>The terminal is where all the magic happens on a developer&#39;s machine. It&#39;s what\nwe spend most of our day in. So it&#39;s important that I use one that is reliable,\nfast and highly customisable.</p>\n<a href=\"#alacritty\"><h3 id=\"alacritty\">Alacritty</h3></a><p>The terminal that ticks all the boxes for me is definitely\n<a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/alacritty/alacritty\">Alacritty</a>. Alacritty markets itself as a modern, fast,\ncross-platform GPU-accelerated terminal emulator.</p>\n<blockquote>\n<p>Yes, I have tried <a target=\"_blank\" rel=\"nofollow\" href=\"https://iterm2.com/\">iTerm2</a>, but honestly it just felt a bit clunky and\ntoo memory hungry. I also wasn&#39;t a fan of the awkward tmux integration built\ninto it.</p>\n</blockquote>\n<p>For me personally, one of the best features of Alacritty is that all the\nconfiguration is managed by a <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/alacritty/alacritty/blob/master/alacritty.yml\">yaml</a> file. As a result, the configuration\ncan be version controlled and easily replicated between machines!</p>\n<p>To install Alacritty, simply follow the instructions on the <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/alacritty/alacritty/blob/master/INSTALL.md\">repo</a>.\nOnce it is installed, create an <code>alacritty.yml</code> file:</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.config/alacritty/alacritty.yml\n</code></pre>\n<p>Then copy across my <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/jltwheeler/dotfiles/blob/mac-dev-env/.config/alacritty/alacritty.yml\">alacritty.yaml</a> configuration.</p>\n<a href=\"#homebrew\"><h3 id=\"homebrew\">Homebrew</h3></a><p>Package managers <em>simplify</em> installing, updating and removing software on the\noperating system. <a target=\"_blank\" rel=\"nofollow\" href=\"https://brew.sh/\">Homebrew</a> is the most popular package manager for\nmacOS. For those coming from a Linux (Debian) background, Homebrew is\nessentially just the mac equivalent of <code>apt</code>.</p>\n<blockquote>\n<p>I pretty much use <code>brew</code> to install <em>everything</em> I use.</p>\n</blockquote>\n<p>Before installing Homebrew, the <strong>Command Line Developer Tools for Xcode</strong> will\nneed to be installed. Essentially, these tools provide a bunch of build tools,\ncompilers etc. that Homebrew will need. To install these, run:</p>\n<pre><code class=\"language-bash\">xcode-select --install\n</code></pre>\n<p>Once that is done, install Homebrew by running the command on their homepage:</p>\n<pre><code class=\"language-bash\">/bin/bash -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span>\n</code></pre>\n<p>To verify if the Homebrew installed correctly, run:</p>\n<pre><code class=\"language-bash\">brew doctor\n</code></pre>\n<a href=\"#git\"><h3 id=\"git\">Git</h3></a><p>Although macOS comes with a pre-installed version of <a target=\"_blank\" rel=\"nofollow\" href=\"http://git-scm.com/\">git</a>, I recommend\ninstalling git via Homebrew. This allows for easy version upgrades in the\nfuture without messing with the system default version.</p>\n<pre><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token function\">git</span>\n</code></pre>\n<p>Run the command below to verify that git installed and are now using the\nHomebrew installed git at <code>/usr/local/bin/git</code>:</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">which</span> <span class=\"token function\">git</span>\n</code></pre>\n<blockquote>\n<p><strong>NOTE:</strong> it is a common pattern to install software that comes pre-installed\nwith macOS via Homebrew to better manage your software versions.</p>\n</blockquote>\n<p>My <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/jltwheeler/dotfiles/blob/mac-dev-env/.gitconfig\">~/.gitconfig</a> is fairly minimal, however I do add some\nconfiguration to support a nicer <code>git diff</code> command using <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/dandavison/delta\">delta</a>. I will\ntalk about delta in more depth in the <a href=\"#clis\">CLIs</a> section.</p>\n<a href=\"#zsh\"><h3 id=\"zsh\">zsh</h3></a><p>It is also critical that the shell I&#39;m using provides a great developer\nexperience. After all, I do spend most of my day in the terminal, so I want a\nsetup that provides efficiency <em>and</em> visual aesthetics. This is where <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.zsh.org/\">zsh</a>\nor &#39;Z shell&#39; comes in.</p>\n<p>For macOS v10+, zsh <em>is</em> the default shell. However, if for some reason it&#39;s\nnot, install it by running:</p>\n<pre><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token function\">zsh</span>\n</code></pre>\n<p>Whilst my <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/jltwheeler/dotfiles/blob/mac-dev-env/.zshrc\">~/.zshrc</a> contains a lot of things I&#39;ve written myself, like\n<a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/jltwheeler/dotfiles/blob/mac-dev-env/.zshrc#L104-L143\">aliases</a> (future blog coming on this), I leave <em>most</em> of the\nmanagement of the power user-related configuration to a framework called <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/ohmyzsh/ohmyzsh\">Oh My\nZsh</a>. Oh My Zsh, is an open source, community-driver framework that\nbootstraps a lot of great configuration and themes out of the box. Take a look\nat <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet\">this cheatsheet</a> to have a look at some of the aliases it ships\nwith.</p>\n<p>To install Oh My Zsh, run:</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">sh</span> -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span>\n</code></pre>\n<p>I use <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/romkatv/powerlevel10k\">Powerlevel10k</a> for my zsh theme. Not only does it provide a great\nlooking theme with glyph support, but also comes with a user-friendly\ninteractive prompt to help configure the theme. To install, run:</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">git</span> clone --depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/romkatv/powerlevel10k.git <span class=\"token variable\">${ZSH_CUSTOM<span class=\"token operator\">:-</span>$HOME<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom}</span>/themes/powerlevel10k\n</code></pre>\n<p>After it has installed, enable the powerlevel10k theme in the <code>~/.zshrc</code> file,\nby specifying <code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code>.</p>\n<p>Then ensure to install the recommended <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k\">MesloLGS NerdFont</a>. This font\nallows glyphs and symbols used by Powerlevel10k to render correctly in the\nterminal.</p>\n<p>Once the font is installed and setup correctly, run the following command and\nfollow the P10k prompts to select the desired appearance:</p>\n<pre><code class=\"language-bash\">p10k configure\n</code></pre>\n<p>The terminal should now look nice and beautiful, and resemble something like\nthe image below.</p>\n<p><img src=\"https://josh-wheeler-media.s3.eu-west-2.amazonaws.com/my-mac-dev-environment-setup/zsh-p10k.png\" alt=\"my terminal\"></p>\n<p>Lastly, let&#39;s install some <em>useful</em> plugins that further extend zsh&#39;s\ncapabilities:</p>\n<pre><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/.oh-my-zsh/custom/plugins\n<span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting\n<span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-zsh-autosuggestions\n</code></pre>\n<p>Then, in the <code>~/.zshrc</code>, add the plugins:</p>\n<pre><code class=\"language-bash\"><span class=\"token comment\"># ~/.zshrc</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>git colored-man-pages zsh-syntax-highlighting zsh-autosuggestions<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n</code></pre>\n<p>Source the <code>~/.zshrc</code> file for the changes to take effect:</p>\n<pre><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc\n</code></pre>\n<a href=\"#tmux\"><h3 id=\"tmux\">tmux</h3></a><p><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/tmux/tmux/wiki\">tmux</a> is a terminal multiplexer, letting you switch between several\nprograms and sessions within one terminal. It has a bit of a learning curve,\nbut I can&#39;t imagine life without it. If you&#39;re a backend or cloud\nengineer who does a lot of ssh&#39;in into servers, then it is definitely\nworth installing.</p>\n<p>Install tmux by running:</p>\n<pre><code class=\"language-bash\">brew <span class=\"token function\">install</span> tmux\n</code></pre>\n<p>Then install the <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/tmux-plugins/tpm\">Tmux Plugin Manager</a> to manage installing plugins for\ntmux:</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n</code></pre>\n<p>Plugins can now easily be added into the <code>~/.tmux.conf</code> file with the <code>set -g @plugin &#39;...&#39;</code> command. To install the plugin, simply just save the file and run\nthe <code>tmux prefix + I</code> to fetch and install the plugin.</p>\n<p>My <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/jltwheeler/dotfiles/blob/mac-dev-env/.tmux.conf\">~/.tmux.conf</a> contains all the configurations and plugins I use. The\nplugins and configuration are mostly based around the status bar and vim\nintegration.</p>\n<a href=\"#ide---neovim\"><h2 id=\"ide---neovim\">IDE - Neovim</h2></a><p><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/neovim/neovim\">Neovim</a> is a modern fork of vim with a great community backing. It is a\nlot quicker than vim and also provides other advantages such as better\nconfiguration and now an inbuilt LSP.</p>\n<pre><code class=\"language-bash\"><span class=\"token comment\"># To install latest stable build</span>\nbrew <span class=\"token function\">install</span> neovim\n\n<span class=\"token comment\"># To install development version (v0.5 at time of writing)</span>\nbrew <span class=\"token function\">install</span> --HEAD luajit\nbrew <span class=\"token function\">install</span> --HEAD neovim\n</code></pre>\n<p>At the time of writing, I&#39;m still using <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/neoclide/coc.nvim\">CoC.vim</a> for the language server\nand vscode-like snippets. But, I have intentions of migrating to the out of box\nLSP provided in <code>neovim v0.5</code>.</p>\n<p>Install <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/junegunn/vim-plug\">vim-plug</a> to manage plugin installation:</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">sh</span> -c <span class=\"token string\">'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\\n       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'</span>\n</code></pre>\n<p>Create a <code>~/.config/nvim/init.vim</code> and a <code>~/.config/nvim/coc-settings.json</code> file\nand copy across my <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/jltwheeler/dotfiles/blob/mac-dev-env/.config/nvim/init.vim\">init.vim</a> and <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/jltwheeler/dotfiles/blob/mac-dev-env/.config/nvim/coc-settings.json\">coc-settings.json</a>.</p>\n<a href=\"#clis\"><h2 id=\"clis\">CLIs</h2></a><p>I&#39;m a big fan of software that runs via the command line. These are the most\ncommon software&#39;s that I rely on for my daily workflow:</p>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://docs.docker.com/docker-for-mac/install/\">Docker</a> - although Docker Desktop is technically a desktop app, I\nonly use docker via the terminal.</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-mac.html\">aws cli</a> and <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/99designs/aws-vault\">aws-vault</a>. The <code>aws-cli</code> doesn&#39;t need much\nexplanation, it is the gateway to calling AWS APIs. On the other hand,\n<code>aws-vault</code> makes it easy to securely store and access AWS credentials in a\ndev environment. It also makes it simple to switch between multiple IAM roles\nquickly.</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/nvm-sh/nvm\">nvm</a> - Node version manager for managing multiple node version</li>\n</ul>\n<pre><code class=\"language-bash\"><span class=\"token function\">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh <span class=\"token operator\">|</span> <span class=\"token function\">zsh</span>\n</code></pre>\n<p>Then add to the following to the <code>~/.zshrc</code> file:</p>\n<pre><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NVM_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token punctuation\">[</span> -z <span class=\"token string\">\"<span class=\"token variable\">${XDG_CONFIG_HOME-}</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">printf</span> %s <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token environment constant\">HOME</span>}</span>/.nvm\"</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">printf</span> %s <span class=\"token string\">\"<span class=\"token variable\">${XDG_CONFIG_HOME}</span>/nvm\"</span><span class=\"token variable\">)</span></span>\"</span>\n<span class=\"token punctuation\">[</span> -s <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>. <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"token comment\"># This loads nvm</span>\n</code></pre>\n<blockquote>\n<p><em>NOTE:</em> I&#39;m currently looking into switching from nvm to <a target=\"_blank\" rel=\"nofollow\" href=\"https://volta.sh/\">volta</a></p>\n</blockquote>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/rupa/z\">z</a> - Tracks your most used directories, based on &#39;frecency&#39;. After a\nshort learning phase, <code>z</code> will take you to the most &#39;frecent&#39; directory that\nmatches ALL of the regexes given on the command line, in order:<ul>\n<li><code>brew install z</code></li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/sharkdp/bat\">bat</a> - A cat clone with syntax highlighting and Git integration:<ul>\n<li><code>brew install bat</code></li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/dandavison/delta\">delta</a> - A viewer for git and diff output:<ul>\n<li><code>brew install delta</code></li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/Canop/broot\">broot</a> - A new way to see and navigate directory trees:<ul>\n<li><code>brew install broot</code></li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/BurntSushi/ripgrep\">ripgrep</a> - ripgrep recursively searches directories for a regex pattern while respecting your gitignore:<ul>\n<li><code>brew install ripgrep</code></li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/junegunn/fzf\">fzf</a> - A general purpose command-line fuzzy finder:<ul>\n<li><code>brew install fzf &amp;&amp; $(brew --prefix)/opt/fzf/install</code></li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/ranger/ranger\">ranger</a> - A VIM-inspired file manager for the console:<ul>\n<li><code>brew install ranger</code></li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/nicolargo/glances\">glances</a> - Glances an Eye on your system. A top/htop alternative:<ul>\n<li><code>brew install glances</code></li>\n</ul>\n</li>\n</ul>\n<a href=\"#desktop-apps\"><h2 id=\"desktop-apps\">Desktop Apps</h2></a><p>Here are some useful desktop apps that I could not live without:</p>\n<a href=\"#alfred\"><h3 id=\"alfred\">Alfred</h3></a><p>The popular power user quick launch tool for macOS, allowing you to do almost\nanything on your mac via hotkeys. I&#39;m a big fan of minimising mouse usage and\nimproving efficiency where possible. <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.alfredapp.com/\">Alfred</a> lets me do just that.</p>\n<p><img src=\"https://josh-wheeler-media.s3.eu-west-2.amazonaws.com/my-mac-dev-environment-setup/alfred.png\" alt=\"Alfred screenshot\"></p>\n<pre><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask alfred\n</code></pre>\n<p>After installing, go into <code>Alfred</code> and change the shortcut to <code>⌘ + space</code>.</p>\n<a href=\"#spectacle\"><h3 id=\"spectacle\">Spectacle</h3></a><p>Window manager that allows you to resize and move windows via keyboard\nshortcuts.</p>\n<pre><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask spectacle\n</code></pre>\n<a href=\"#iglance\"><h3 id=\"iglance\">iGlance</h3></a><p>iGlance is a small system monitor that displays current stats (e.g. CPU,\nmemory, temp) about your Mac on the menu bar</p>\n<pre><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask iglance\n</code></pre>\n<a href=\"#brave\"><h3 id=\"brave\">Brave</h3></a><p>Fast, private and secure chromium-based browser with great development tool\nsupport. Need I say more?</p>\n<pre><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask brave-browser\n</code></pre>\n<a href=\"#useful-links\"><h2 id=\"useful-links\">Useful Links</h2></a><ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/jltwheeler/dotfiles/tree/mac-dev-env\">dotfiles</a> - all my dotfile configurations for easy reference</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/ibraheemdev/modern-unix\">Modern Unix</a> A collection of modern/faster/saner alternatives to common unix commands.</li>\n<li>Other good setups documents / repos:<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://youtu.be/tmnopaqrfae\">Coding Garden - Setting up a Mac for Web Dev 2020</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://nickjanetakis.com/blog/the-tools-i-use\">Nick Janetakis - The Tools I use</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/nicolashery/mac-dev-setup\">nicolashery/mac-dev-setup</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://kentcdodds.com/uses/\">Kent C Dodds Uses</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/theprimeagen/.dotfiles\">The Primeagen dotfiles</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.swyx.io/new-mac-setup-2021/\">swyx mac dev setup 2021</a></li>\n</ul>\n</li>\n</ul>\n<!--- MARKDOWN LINKS -->\n\n","data":{"id":2,"title":"My Mac Dev Environment Setup","description":"I've recently started a new job where I've had to setup a Macbook for the first time ever. Here's everything I use on my Mac for fullstack web development.","date":"August 06 2021","readTime":"10 min read"}},"__N_SSG":true}